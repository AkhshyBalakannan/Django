2.1 django-admin startproject
2.2 django-admin startapp or py manage.py startapp
2.3 Model and Schema and python UI to work with objects
2.4 Templating rendering files 
2.5 Migrations django to know how to interact with database
2.6 Form and post method
2.7 static files{% load static %} {% static 'file_dir' %}
3.1 Middlewares 
https://docs.djangoproject.com/en/3.1/ref/middleware/
cache middleware
class UpdateCacheMiddleware
class FetchFromCacheMiddleware

many ways to set cache the most common and fastest way is memcache
all data is stored directly in the mem

we need memcache binding to be installed those are
python-memcached and pylibmc








3.2 Request and response
HttpRequest.scheme string representing the scheme
HttpRequest.body will be used when HttpRequest.POST
HttpRequest.readline() may raise RawPostDataException
HttpRequest.path
HttpRequest.path_info
HttpRequest.encoding
HttpRequest.content_type
HttpRequest.content_params dictionary key value in header
HttpRequest.COOKIES
HttpRequest.user will trigger AuthenticationMiddleware

3.3 Query set .filter() .exclude() .annotate(count('entry'))
.entry__count will give you the output
set an default name num = Count('entry')
.num will give the output
.order_by('-pub_date')
.order_by(?) random ordering
.order_by() when no need to order 
QuerySet.ordered can tell you whether
.reverse()[:5] reverse order last first and so on
.distinct() Eliminates duplicate rows 
select_for_update()¶
select_for_update(nowait=False, skip_locked=False, of=())

# When calling save() for instances with deferred fields,
# only the loaded fields will be saved.
# Load all fields immediately.
# my_queryset.defer(None)


# Since defer() acts incrementally(adding fields to the deferred list),
# you can combine calls to only() and defer() and things will behave logically:

# Final result is that everything except "headline" is deferred.
# Entry.objects.only("headline", "body").defer("body")


# entries = Entry.objects.select_for_update().filter(author=request.user)
# with transaction.atomic():
#     for entry in entries:
#         ...

# Final result loads headline and body immediately (only() replaces any
# existing set of fields).
# Entry.objects.defer("body").only("headline", "body")

# qs1.union(qs2, qs3)
# qs1.intersection(qs2, qs3)
# qs1.difference(qs2, qs3)


# Restaurant.objects.prefetch_related('pizzas__toppings')

# This will prefetch all pizzas belonging to restaurants,
# and all toppings belonging to those pizzas.
# This will result in a total of 3 database queries - one for the restaurants,
# one for the pizzas, and one for the toppings.

AND (&)
Combines two QuerySets using the SQL AND operator.

Model.objects.filter(x=1) & Model.objects.filter(y=2)
Model.objects.filter(x=1, y=2)
from django.db.models import Q
Model.objects.filter(Q(x=1) & Q(y=2))

SELECT ... WHERE x=1 AND y=2

OR (|)
Combines two QuerySets using the SQL OR operator.

Model.objects.filter(x=1) | Model.objects.filter(y=2)
from django.db.models import Q
Model.objects.filter(Q(x=1) | Q(y=2))

SELECT ... WHERE x=1 OR y=2



3.4 Filters | {{ var }} {% %}
3.5 build in templates
build in tags

for endfor
empty
comment
if endif
ifequal and ifnotequal
ifchanged
include
{% lorem [count] [method] [random] %}
with

build in filters

|add:'2'
{{ value|add:"2" }}
{{ first|add:second }}  first is [1, 2, 3] and second is [4, 5, 6], then the output will be [1, 2, 3, 4, 5, 6].
{{ value|capfirst }}
"{{ value|center:"15" }}"
|date is important
{{ value|date:"D d M Y" }}

Takes a list of dictionaries and returns that list sorted by the key given in the argument.
{{ value|dictsort:"name" }}

{{ value|filesizeformat }}
If value is 123456789, the output would be 117.7 MB.

json_script¶
Safely outputs a Python object as JSON, wrapped in a <script> tag, ready for use with JavaScript.

Argument: HTML “id” of the <script> tag.

For example:

{{ value|json_script:"hello-data" }}
If value is the dictionary {'hello': 'world'}, the output will be:

<script id="hello-data" type="application/json">{"hello": "world"}</script>
The resulting data can be accessed in JavaScript like this:

const value = JSON.parse(document.getElementById('hello-data').textContent);
XSS attacks are mitigated by escaping the characters “<”, “>” and “&”. For example if value is {'hello': 'world</script>&amp;'}, the output is:

<script id="hello-data" type="application/json">{"hello": "world\\u003C/script\\u003E\\u0026amp;"}</script>
This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code.

{{ value|random }}

{{ value|slugify }}
Converts to ASCII. Converts spaces to hyphens

{% value|time:"H\h i\m" %}
This would display as “01h 23m”.

{{ value|truncatechars:7 }}
If value is "Joel is a slug", the output will be "Joel i…".

{{ value|truncatewords:2 }}
If value is "Joel is a slug", the output will be "Joel is …".

{{ value|wordcount }}

{{ value|wordwrap:5 }}





